The ``0-add_integer`` module
============================

Using ``add_integer``
--------------------

We first import ``add_integer`` from the ``0-add_integer`` module

    >>> add_integer = __import__('0-add_integer').add_integer

Case of numbers
===============

The function recieves integers
    >>> add_integer(1, 3)
    4

    >>> add_integer(-1, -2)
    -3

    >>> add_integer(-1, 2)
    1

    >>> add_integer(2, -10)
    -8

The function can also recieves float Numbers and cast them into integers
    >>> add_integer(1.0, 100.5)
    101
    
    >>> add_integer(-1.0, -2.0)
    -3
    
    >>> add_integer(-1.0, 6.0)
    5

    >>> add_integer(4.3, -2.5)
    2

Integers and float numbers can be combined
    >>> add_integer(100.3, 2)
    102

    >>> add_integer(3, 2.6)
    5

By default b=98, so the second argument b is optional
    >>> add_integer(1)
    99

Case of Non-Nombers:
====================

The function ``add_integer`` expects that both parameters a and b must be integers or float.
If it is not the case, a TypeError is raised.

    >>> add_integer('a', 3)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer


    >>> add_integer(2, 'c')
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer


    >>> add_integer("Hello", 5)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer


    >>> add_integer(2, "School")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer


    >>> add_integer("ALX", "School")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer


    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer


    >>> add_integer(2, None)
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer


In the case of infinity is provided or NaN numebrs:
    >>> add_integer(float('inf'), 2)
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer


    >>> add_integer(3.5, float('-inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer


    >>> add_integer(float('nan'), 100)
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer


    >>> add_integer(12, float('nan'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer

If no argument is provided, a TypeError is raised

    >>> add_integer()
    Traceback (most recent call last):
    ...
    TypeError: add_integer() missing 1 required positional argument: 'a'
