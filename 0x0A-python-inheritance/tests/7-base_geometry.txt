The ``7-base_geometry`` module
==============================


Using ``BaseGeometry``
----------------------

First import ``BaseGeometry`` from the ``7-base_geometry`` module

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry


Testing for module documentation:
    >>> mod = __import__("7-base_geometry").__doc__
    >>> len(mod) > 1
    True


Testing for class documentation:
    >>> cl = __import__("7-base_geometry").BaseGeometry.__doc__
    >>> len(cl) > 1
    True

Testing for method documentation:
    >>> md1 = __import__("7-base_geometry").BaseGeometry.area.__doc__
    >>> len(md1) > 1
    True

    >>> md2 = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
    >>> len(md2) > 1
    True

Testing area() method
=====================

Testing for area() failure:
    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented


Testing too many arguments for area() method:
    >>> bg = BaseGeometry()
    >>> bg.area(2, 5)
    Traceback (most recent call last):
    ...
    TypeError: area() takes 1 positional argument but 3 were given



Testing integer_validator() method
==================================

If the value is a valid integer, the function does nothing.

    >>> bg.integer_validator("my_int", 12)


If the value is not integer, a TypeError is raised.

    >>> bg.integer_validator("my_str", "width")
    Traceback (most recent call last):
    ...
    TypeError: my_str must be an integer


    >>> bg.integer_validator("my_list", [1])
    Traceback (most recent call last):
    ...
    TypeError: my_list must be an integer


    >>> bg.integer_validator("my_float", 5.2)
    Traceback (most recent call last):
    ...
    TypeError: my_float must be an integer


If the value is less or equal to zero, a ValueError is raised.

    >>> bg.integer_validator("my_int", -1)
    Traceback (most recent call last):
    ...
    ValueError: my_int must be greater than 0


    >>> bg.integer_validator("my_int", 0)
    Traceback (most recent call last):
    ...
    ValueError: my_int must be greater than 0


If no arguments are passed, a TypeError is raised.
    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'


If only one argument is passed, a TypeError is raised.
    >>> bg.integer_validator("one")
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'


